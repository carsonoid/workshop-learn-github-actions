name: Rube Goldeberg Workflow

on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Install hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true

      # Get the title of the site by parsing the config.toml file
      - uses: SebRollen/toml-action@4cdab426d5e7838199ed25c199e8c0a1ce806671
        id: read_toml
        with:
          file: 'config.toml'
          field: 'title'

      # Build assets
      - name: Build
        run: hugo --minify

      # Add outputs using information from the current workspace and other steps
      - name: Output
        run: |
          echo "::set-output name=HUGO_VERSION::$(hugo version)"
          echo "::set-output name=HUGO_TITLE::${{ steps.read_toml.outputs.value }}"

      # Use logging features, including the use of workflow commands
      # Ref: https://docs.github.com/en/actions/writing-workflows/working-with-actions#logging-commands
      # Ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#grouping-log-lines
      - name: Logging
        run: |
          # messages printed to stdout are normal messages
          echo "This is a normal message"

          # messages printed to stderr are shown differently
          echo "This is a warning" >&2
          echo "This is an error" >&2
          echo "This is a debug message" >&2
          echo "This is a success message" >&2

          # Grouped messages are shown in a collapsible section
          echo "::group::My title"
          echo "Inside group"
          echo "Inside group again"
          echo "Inside group warning" >&2
          echo "::endgroup::"

          # Secrets are automatically redacted
          echo "This is a secret: ${{ secrets.GITHUB_TOKEN }}"

          # You can add a mask to any string manually if needed
          echo "::add-mask::This is a secret"
          echo "You can't see this -> This is a secret"

          # If your output happens to include workflow commands, you can escape them
          # so that they are printed as-is
          echo "::stop-commands::my-special-rare-token"
          echo "::group::This group will be ignored"
          echo "This is a normal message"
          echo "::endgroup::"
          echo "::stop-commands::"

      # Add messages
      # Ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#about-workflow-commands
      - name: Messages
        run: |
          # debug messages only have a body
          echo "::debug::This is a warning"

          # the others can have more metadata
          echo "::notice::This is a notice"
          echo "::notice file=README.md::This is a notice for the README"
          echo "::warning::This is a warning"
          echo "::warning file=README.md,line=1::This is a warning for the README on line 1"
          echo "::error::This is an error"
          echo "::error title="sample error",file=README.md,line=2,endLine=3,col=4,endCol=5::This is an error for the README on lines 2-3, cols 4-5"

      # Use env vars
      - name: Env Vars
        run: |
          echo "# Here are some default env vars:"
          echo "The runner is $RUNNER_OS"
          echo "The runner is $RUNNER_NAME"
          echo "The runner is $RUNNER_ID"
          echo "The runner is $GITHUB_REF"

          echo "# Here is how you can set an env var for later steps:"
          echo "## The old way:"
          echo "echo '::set-env name=ENV_FROM_PRINT::value'"
          echo "## The new, preferred way:"
          echo "echo 'ENV_FROM_FILE_WRITE=my_value' >> $GITHUB_ENV"

      # Use contexts
      # Ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
      - name: Contexts
        if: github.ref == 'refs/heads/main' || true # use the `github` context in a conditional
        run: |
          echo "# Here are some github context values:"
          echo "The branch is ${{ github.ref }}"
          echo "The event name is ${{ github.event_name }}"
          echo "The repository is ${{ github.repository }}"
          echo "The workflow is ${{ github.workflow }}"
          echo "The action is ${{ github.action }}"

          echo "# Here are some env context values:"
          echo "The runner is ${{ env.RUNNER_OS }}"
          echo "Env from print (deprecated): ${{ env.RUNNER_NAME }}"
          echo "Env from file write: ${{ env.ENV_FROM_FILE_WRITE }}"

          echo "# Here are some vars context values:"
          echo "A var set in the repo: ${{ vars.VAR_FROM_REPO }}"
          echo "Another var in the repo: ${{ vars.VAR_FROM_REPO_2 }}"

          echo "# Here are some job context values:"
          echo "The job is ${{ github.job }}"
          echo "The run number is ${{ github.run_number }}"
          echo "The run id is ${{ github.run_id }}"
          echo "The run attempt is ${{ github.run_attempt }}"
          echo "The job run id is ${{ github.job_run_id }}"
          echo "The action run id is ${{ github.action_run_id }}"

          echo "# Here are some steps context values:"
          echo "The step is ${{ github.step }}"
          echo "The action is ${{ github.action }}"
          echo "The step number is ${{ github.step_number }}"
          echo "The step id is ${{ github.step_id }}"

          echo "# Here are some runner context values:"
          echo "The runner is ${{ runner.os }}"
          echo "The runner is ${{ runner.name }}"
          echo "The runner is ${{ runner.id }}"

          echo "# Here are some secrets context values:"
          echo "The secret is ${{ secrets.GITHUB_TOKEN }}"
          echo "The secret is ${{ secrets.SECRET_FROM_REPO }}"


      # Deploy to GitHub Pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' # TODO(final): cleanup
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          cname: guts-of-git.carson-anderson.com

      - name: Summary
        run: |
          {
            echo "# Summary"
            echo "Hugo version: ${{ steps.build.outputs.HUGO_VERSION }}"
            echo "Hugo title: ${{ steps.build.outputs.HUGO_TITLE }}"
            echo "The build is complete at $(date)"
          } >> $GITHUB_STEP_SUMMARY
