[{"id":0,"href":"/workshop-learn-github-actions/workshop/preamble/","title":"Preamble","section":"Workshop","content":" Preamble # Before you dive into the workshop, there are a few basic things it may help to understand\nNext About GitHub Actions # YAML, YAML, and more YAML # GitHub Actions relies heavily on YAML for defining the work to be done.\nSome basic yaml features that will help you understand the files in this workshop\na: yaml object: uses colons: to separate keys and values list-descr: - a - yaml - list - uses hypens to separate items list-of-objects: - a: yaml list: of objects - uses: hypens to: start new objects list-of-objects: - a: yaml list: of objects - uses: hypens to: start new objects Back Next Basic Architecture # TODO: What the heck should go here? Is this about GitHub Actions architecture or the workshop\u0026rsquo;s architecture?\nI think a graphic showing the architecture of what we are building would be useful. Main things to diagram:\nA source repo for the workshop GitHub Codespaces GitHub Actions (no workflows, jobs, or steps yet) GitHub Pages Someone loading the resulting page from the publish workflow Back Next About Hugo - The generator for this site # GitHub Actions (our CICD) and GitHub Pages (our hosting platorm) don\u0026rsquo;t require you to use any particular language or tool. But this specific workshop is built on the wonderful, open-source Hugo static site generator and the hugo-book theme.\nYou will not need to install hugo locally, it actually comes bundled into Codespaces\nBack Next "},{"id":1,"href":"/workshop-learn-github-actions/workshop/1-create-repo/","title":"1 - Create the Repository","section":"Workshop","content":" Create the Repository # First, you will need to create a new repository on GitHub. This repository will be used to store the code for the workshop and will be the repository which will run all the GitHub Actions and Workflows.\nWe are going to make a new repository using the GitHub web interface.\nInstructions # Open up the New Repository Page and fill it out with these suggested settings:\nTemplate: No Template Owner: Your GitHub User Name: workshop-learn-github-actions This can be the same for everyone since it is namespaced under your user Visibility: Public GitHub Actions are availabile to both public and private repositories, Each repository gets a number of free \u0026ldquo;minutes\u0026rdquo; of action time per month. But, we will be using GitHub Pages to serve the static assets, which will require the repository to be public. Everything else can be left unchecked. We will be bootstraping the contents of the repo in a later step\nBack Next Bootstrap The Repository Contents # Open the respository in GitHub Click the Code button Click the \u0026ldquo;Codespaces tab\u0026rdquo; Click \u0026ldquo;Create codespace on main\u0026rdquo; Wait for the page to load Use the terminal to download and extract the assets for the workshop curl https://carsonoid.github.io/workshop-learn-github-actions/workshop-assets.tgz | tar -zxv Alternatively, you can click here download the assets then right click in the file explorer and choose \u0026ldquo;Upload\u0026rdquo;, then run tar -zxvf workshop-assets.tgz Back Next Run the site live # The default codespace image comes with hugo pre-installed, but it does not have some features required by this site, so we need to install the extended edition:\ncurl -L https://github.com/gohugoio/hugo/releases/download/v0.134.3/hugo_extended_0.145.0_linux-amd64.tar.gz | tar -zxv hugo Then run the version we installed:\n./hugo server @carsonoid ➜ /workspaces/workshop-learn-github-actions (main) $ hugo server Watching for changes in /workspaces/workshop-learn-github-actions/{content,data,layouts,static,themes} Watching for config changes in /workspaces/workshop-learn-github-actions/config.toml Start building sites … hugo v0.124.1-db083b05f16c945fec04f745f0ca8640560cf1ec linux/amd64 BuildDate=2024-03-20T11:40:10Z VendorInfo=gohugoio | EN -------------------+----- Pages | 18 Paginator pages | 0 Non-page files | 3 Static files | 78 Processed images | 0 Aliases | 2 Cleaned | 0 Built in 52 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at //localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop You can even view the site by selecting \u0026ldquo;open in browser\u0026rdquo; when codespace pops up.\nBack Next Build the site # Runing hugo server builds the site for local viewing, but it does not build production-ready assets. To do that, simply run hugo without any arguments.\n./hugo @carsonoid ➜ /workspaces/workshop-learn-github-actions (main) $ hugo Start building sites … hugo v0.124.1-db083b05f16c945fec04f745f0ca8640560cf1ec linux/amd64 BuildDate=2024-03-20T11:40:10Z VendorInfo=gohugoio | EN -------------------+----- Pages | 18 Paginator pages | 0 Non-page files | 3 Static files | 78 Processed images | 0 Aliases | 2 Cleaned | 0 Total in 101 ms Success! Now we have a public directory inside the codespace that contains all the static web assets needed to serve our site.\nBack Next "},{"id":2,"href":"/workshop-learn-github-actions/workshop/2-introduction/1-steps/","title":"1 - Steps","section":"2 - Introducing GitHub Actions","content":" Steps # Steps are the basic building block for jobs. These are the actual actions part of GitHub Actions. They are essentially a task that you need done. This could be a task that uses code in the repository, but it does not have to be. A step could essentially do anything.\nThink of steps as analogous to `functions` in code. They are a logical grouping of behaviors. Examples # Basic # A very basic example of a step might be to fetch the code for the current repo.\n- name: Checkout uses: actions/checkout@v3 Steps may have configuration, the format and specifics of the configuration are dependent on action being used.\n- name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 Steps may also be as simple as running a script:\n- name: Build run: hugo --minify Complex scripts may use the yaml multiline syntax to provide\n- name: Build run: | echo \u0026#34;doing thing\u0026#34; date sleep 1 echo \u0026#34;done\u0026#34; Back Next "},{"id":3,"href":"/workshop-learn-github-actions/workshop/","title":"Workshop","section":"Introduction","content":" Workshop: Learning GitHub Actions # What you need # A GitHub account Internet access This is a fully-online workshop, even the code editing will be done via browser What you do not need # A git client installed on your machine We will be using GitHub to do git operations You can use a git client and clone the repository to your local machine if you prefer A code editor We will be using the GitHub vscode web editor You can use a local editor if you prefer, but the workshop will use GitHub Codespaces Next GitHub Primer # The only requirement to do this workshop is a GitHub account. If you do not have one, it is easy and free to sign up.\nGitHub Actions Pricing # This workshop requires you to use GitHub Actions. This is a service provided by GitHub and as such may or may not have a cost associated with it depending on your usage.\nThis workshop we have you make a public repository and contains very short workflows. This means that there should be no cost associated with doing this workshop. As long as you make your repository public then usage of GitHub actions is free to a point. But please reference the Billing Documentation for information on the cost associated with using GitHub Actions in private repositories and free usage limitations.\nGitHub Codespaces Pricing # For speed and ease of use, this workshop is built around GitHub Codespaces. Whenever possible, it contains alternate instructions that do not require Codespaces. This is a service provided by GitHub and comes with limitations and a potential cost\nYou do not have to use Codespaces in order to use GitHub Actions! This is done in the workshop purely for minimal attendee setup. Free accounts get 120 hours per month which is much, much less time then is required to complete this workshop. Each user gets a limited number of free Codespace hours per month. Be sure to stop or delete codespaces when you are done so you do not waste usage hours with an idle codespace. If you do not manually stop, the codespace will timout after a set duration (default 30 minutes) so the maximum wasted time is 1/2 hour if you do not manually exit a space. See the Billing Documentation for more information on the free tier or added costs.\nBack Next Next "},{"id":4,"href":"/workshop-learn-github-actions/workshop/2-introduction/","title":"2 - Introducing GitHub Actions","section":"Workshop","content":" Where We are # By now you should have a new repository and Codespace running, this workspace includes all the assets for this workshop. However, you can\u0026rsquo;t view the workshop without running hugo in your Codespace and accessing a port forward.\nWhat We Want # A new publically available website for the workshop based on your repo Automatic builds of the workshop for commits to ensure that PRs never merge if they break builds Automatic publishing changes that have been merged into main to the public website. What We Don\u0026rsquo;t Want # To have to install anything locally To have to have any servers to maintain To have to pay anything for our tiny little personal project Next Introducing GitHub Actions # Thankfully, GitHub Actions can give us everything we need. But before we start writing yaml files we need to understand the fundamental building blocks of GitHub Actions.\nThe yaml snippets below are simplified to help understand the main building-blocks of GitHub Actions. They will not work if copied directly. Back Next Runners # Back Next Steps # Steps are the smallest building blocks of GitHub Actions. They are defined in yaml and can be as simple as executing a single command or as complex as running a nested series of steps.\nA simple yaml definition for a \u0026ldquo;Build\u0026rdquo; step might look like this:\nname: Build run: hugo Back Next Jobs # Jobs are collections of one or more steps that should be run in sequence.\nAll the steps in a job are run on the same host without any automatic cleanup between them. This is fundamentally different from many other CI/CD systems\nA simple yaml definition for a Build job containing our Build step might look like this:\nname: Build runs-on: ubuntu-20.04 steps: - name: Build run: hugo Notice the Build step from is now nested in the steps list\nBack Next Workflows # Workflows are collections of one or more jobs that should be potentially executed using the same trigger conditions.\nname: CI/CD on: push # The trigger conditions jobs: build: name: Build runs-on: ubuntu-20.04 steps: - name: Build run: hugo Notice the Build job from is now nested in the jobs list\nBack Next "},{"id":5,"href":"/workshop-learn-github-actions/workshop/2-introduction/2-jobs/","title":"2 - Jobs","section":"2 - Introducing GitHub Actions","content":" Jobs # In GitHub Actions, jobs represent a series of steps that are executed in order. Important things to know about jobs:\nJobs must run on a single runner Jobs have a workspace which persists between steps Jobs can trigger other jobs Jobs must be defined inside a workflow Back Next "},{"id":6,"href":"/workshop-learn-github-actions/workshop/3-first-workflow/","title":"3 - First Workflow","section":"Workshop","content":" First Workflow # Once you have the bootstrapped repository and workshop content from the Create Repo Page you are ready to create your first GitHub Actions Workflow!\nThe general overview of this workflow:\nRun on push to the repository Contains a single job which should Clone the repo Install hugo Build the site (sometimes) Publish the site to GitHub Pages There are many, many more fields that are valid for workflows, jobs, and steps then we will cover here. [See the docs for all the options](https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions) Back Next Create the workflow # Defining a workflow with GitHub actions is easy as making a file! Do the following inside your code space:\nmkdir -p .github/workflows touch .github/workflows/cicd.yaml Or\nRight Click in the explorer and click \u0026ldquo;New File\u0026rdquo; and type .github/workflows/cicd.yaml\n**The folder names matter** The file name for a workflow file can by anything. But it *must* be in a directory at the root of the repo that exactly matches the name `.github/workflows` for the file to be discovered. Back Next Setup the workflow name and trigger # Here is the start to our new workflow:\nname: CI/CD on: push jobs: The name field is optional and can be whatever you want. But it will be used in the GitHub UI in many places so a short human-friendly name is best. The on field is where you define the conditions under which your workflow runs. We will just use on: push to have the workflow trigger whenver any commits or tags are pushed. The jobs field is where all jobs are defined, it is empty for now but we will add the first job in the next step Back Next Setup the build job # name: CI/CD on: push jobs: build: name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: The jobs field of the workflow is a map of job ids to job descriptions. We have defined a single job with the id of build\nThe name field is used to give our job a more human-readable name The runs-on field is required. It tells the actions information about the kind of runner the job needs. We are using ubuntu-20.04 which is a GitHub Hosted Runner. There are many other kinds of runner, including custom runners (not covered in this workshop) The permissions field defines custom permissions this workflow will need on our repo. This field is optional and the default is normally only contents: write. This workflow is going to need to push the static site content to a branch of the repository, so we need to give it extra permissions. The steps field is empty for now, but we will put all our job steps there in the next section. Back Next Add the checkout step # name: CI/CD on: push jobs: build: name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 Remember: Each job starts with an empty workspace. So, if we want to build our static web site from the workshop code, we need to first clone the repository from GitHub.\nWe can do this with the actions/checkout action which is an offical action provided and maintained by GitHub directly.\nThings to note about this action:\nIt references a github repository by name using the uses field It is pinned to a specific tag in the by using the @ sign in the action names. This is required, GitHub actions does not have an automatic \u0026ldquo;latest\u0026rdquo; tag for actions. (this is a good thing!) TODO HERE Back Next Add the hugo install step # name: CI/CD on: push jobs: build: name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true Back Next Add the build step # name: CI/CD on: push jobs: build: name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify Back Next Add the deploy step # name: CI/CD on: push jobs: build: name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public cname: guts-of-git.carson-anderson.com Back Next Full Final Workflow # name: CI/CD on: push jobs: build: if : github.ref == \u0026#39;refs/heads/main\u0026#39; name: Build runs-on: ubuntu-20.04 permissions: contents: write steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public cname: guts-of-git.carson-anderson.com Back Next Now run it! # git checkout -b init git add . git commit -m \u0026#34;feat: initial add\u0026#34; git push -u origin HEAD Back "},{"id":7,"href":"/workshop-learn-github-actions/workshop/2-introduction/3-workflows/","title":"3 - Workflows","section":"2 - Introducing GitHub Actions","content":" Workflows # In GitHub Actions, workflows are a colleciton of jobs. Important things to know about workflows\nWorkflows can define multiple jobs Workflows can be called many ways: By code change Manually By other workflows Workflows do not actually execute directly, they only define jobs which get executed Back Next "},{"id":8,"href":"/workshop-learn-github-actions/credits/","title":"Credits","section":"Introduction","content":"Authors Carson Anderson Site # Hugo hugo-book theme "}]